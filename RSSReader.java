import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Michael Silverii
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * The three following int's are meant to retrieve the child index's for
         * the title, link, and description elements. It is assumed that all of
         * these children are present.
         */

        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int descIndex = getChildElement(channel, "description");

        /*
         * These string's hold the value of whatever is inside (the text child)
         * of the above children.
         */

        String title = channel.child(titleIndex).child(0).label();
        String link = channel.child(linkIndex).child(0).label();
        String desc = channel.child(descIndex).child(0).label();

        /*
         * It is possible for the title and description tags to not have a text
         * child. So, if that is the case, their representative string are
         * assigned the following values.
         */

        if (title.isBlank()) {
            title = "Empty Title";
        }

        if (desc.isBlank()) {
            desc = "No description";
        }

        /*
         * The formatted html code is printed to the .html file chosen by the
         * user.
         */

        out.println("<html> <head> <title>" + title + " </title>");
        out.println("</head> <body>");
        out.println("<h1> <a href=\"" + link + "\">" + title + "</a> </h1>");
        out.println("<p>");
        out.println(desc);
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * The closing tags are output to the .html file.
         */

        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * The number of children for the XMLTree passed into this method so
         * that the loop can cover all of the possible children in its search
         * for the specific child.
         */

        int numChildren = xml.numberOfChildren();

        /*
         * The indexOfTag, which is eventually returned by this method, is set
         * to -1 at first, because the method is designed to return -1 if the
         * child is not found. The loop will change the value of indexOfTag to
         * the corresponding "i" (index) value if the child is found.
         */

        int indexOfTag = -1;

        for (int i = 0; i < numChildren; i++) {

            if (xml.child(i).label().equals(tag)) {

                indexOfTag = i;
            }

        }

        return indexOfTag;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * To begin, the indexes of each element we are using are searched for.
         * If found, they are assigned with child index, according to the
         * XMLTree item passed into the method. If the element is not found, it
         * is assigned with an "index" of -1.
         */
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        int dateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        int descIndex = getChildElement(item, "description");
        /*
         * String variables are created to hold to text children of their
         * corresponding parent tags. This is the information that will
         * eventually be printed to the output file.
         */
        String date = "";
        String source = "";
        String title = "";
        String desc = "";
        String link = "";
        String sourceUrl = "";
        out.println("<tr>");
        /*
         * The date comes first in the table. First, the program checks if the
         * date tag even exists before proceeding. If it does exist, it can be
         * assumed that there is a text child for it.
         */
        if (dateIndex != -1) {
            date = item.child(dateIndex).child(0).label();
            out.println("<td>" + date + "</td>");

        } else {
            date = "No date available";
            out.println("<td>" + date + "</td>");
        }
        /*
         * The description tag is checked first if it exists, and then checked
         * for a text child. The description is only used in certain cases, when
         * the title tag is not present.
         */
        if (descIndex != -1) {
            if (item.child(descIndex).numberOfChildren() > 0) {
                desc = item.child(descIndex).child(0).label();
            } else {
                desc = "No title available";
            }
        } else {
            desc = "No title available";
        }
        /*
         * The source is checked if it is present, and then is checked if it has
         * a text child. The source item, if existent, will have an attribute
         * named url. The url attribute contains a link to the source for the
         * article. This source will be hyperlinked within the source portion of
         * the table
         */
        if (sourceIndex != -1) {
            sourceUrl = item.child(sourceIndex).attributeValue("url");
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                source = item.child(sourceIndex).child(0).label();
                out.println("<td> <a href=\"" + sourceUrl + "\">" + source
                        + "</a> </td>");

            } else {
                source = "No source available";
                out.println("<td>" + source + "</td>");
            }
        } else {
            source = "No source available";
            out.println("<td>" + source + "</td>");
        }
        /*
         * The link, which is checked for existence, is required to have a text
         * child if it exists. This text child will contain a link that is later
         * hyperlinked in the title section of the table.
         */
        if (linkIndex != -1) {
            link = item.child(linkIndex).child(0).label();
        }
        /*
         * The title index must first be checked to see if it exists. If it
         * does, then it must be checked for a child with text. If it does not
         * have a child with text or if it doesn't exist at all, then the
         * description, if it exists and has a text child, will be used in it's
         * place. If none of these requirements are satisfied, simply "No title
         * available" will be assigned to String title. The link for the
         * article, if it exists will also be hyperlinked within the news
         * portion of the table. There will also only be a hyperlink present, if
         * the link exists (link.length() > 0).
         */
        if (titleIndex != -1) {
            if (item.child(titleIndex).numberOfChildren() > 0) {
                title = item.child(titleIndex).child(0).label();
                if (link.length() > 0) {
                    out.println("<td> <a href=\"" + link + "\">" + title
                            + "</a> </td>");
                } else {
                    out.println("<td>" + title + "</td>");
                }
            } else {
                if (descIndex != 1
                        && item.child(descIndex).numberOfChildren() > 0) {
                    if (link.length() > 0) {
                        out.println("<td> <a href=\"" + link + "\">" + desc
                                + "</a> </td>");
                    } else {
                        out.println("<td>" + desc + "</td>");
                    }
                } else {
                    title = "No title available";
                    if (link.length() > 0) {
                        out.println("<td> <a href=\"" + link + "\">" + title
                                + "</a> </td>");
                    } else {
                        out.println("<td>" + title + "</td>");
                    }
                }
            }
        } else if (descIndex != 1) {

            if (link.length() > 0) {
                out.println(
                        "<td> <a href=\"" + link + "\">" + desc + "</a> </td>");
            } else {
                out.println("<td>" + desc + "</td>");
            }

        } else {
            title = "No title available";
            if (link.length() > 0) {
                out.println("<td> <a href=\"" + link + "\">" + title
                        + "</a> </td>");
            } else {
                out.println("<td>" + title + "</td>");
            }
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * The main method asks the user for an RSS 2.0 feed input, and then
         * outputs the header, table, and footer if the input is valid. If the
         * input is valid XML but not rss 2.0, they will be prompted to enter
         * another url. However, if the input is not valid xml at all, then the
         * program will throw an error and cease running. If everything is
         * valid, and rss 2.0, the program will generate an html page with
         * information read from the xml file.
         */

        boolean validXML = false;
        String url = "";

        while (!validXML) {

            out.print("Enter the URL of an RSS 2.0 news feed: ");
            url = in.nextLine();
            XMLTree xml = new XMLTree1(url);

            if (xml.label().equals("rss") && xml.hasAttribute("version")
                    && xml.attributeValue("version").equals("2.0")) {
                out.println("Thanks, that is valid RSS 2.0");
                validXML = true;
            } else {

                out.println("Sorry, that URL is not valid RSS 2.0,"
                        + " please try again.");
            }

        }
        XMLTree rss = new XMLTree1(url);

        out.print(
                "Enter the desired name of the output file with .html extension: ");
        String fileName = in.nextLine();
        SimpleWriter file = new SimpleWriter1L(fileName);
        XMLTree channel = rss.child(0);

        int children = channel.numberOfChildren();
        out.println(children);

        outputHeader(channel, file);

        for (int i = 0; i < channel.numberOfChildren(); i++) {

            if (channel.child(i).label().equals("item")) {
                // call table method
                XMLTree item = channel.child(i);
                processItem(item, file);
            }
        }

        outputFooter(file);

        in.close();
        out.close();
    }

}